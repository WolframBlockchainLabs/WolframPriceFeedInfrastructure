version: '3.9'

services:
    backend:
        build:
            context: ../
            dockerfile: ./docker/config/backend/Dockerfile
            args:
                PORT: 8000
        container_name: ccdb-backend
        ports: ['8000:8000']
        image: ${BE_REGISTRY_ADDRESS}:${BE_TAG}
        depends_on:
            timescale:
                condition: service_healthy
            rabbitmq:
                condition: service_started
        env_file: ./env/.env.backend
        command: sh -c "npm run nodemon"
        volumes:
            - ../:/app
            - /app/node_modules

    # ccxt-collectors-1:
    #     image: ${BE_REGISTRY_ADDRESS}:${BE_TAG}
    #     container_name: ccdb-ccxt-collectors-1
    #     depends_on:
    #         timescale:
    #             condition: service_healthy
    #         rabbitmq:
    #             condition: service_started
    #     env_file: ./env/.env.backend
    #     environment:
    #         CCXT_INSTANCE_POSITION: 0
    #         CCXT_REPLICA_SIZE: 2
    #     command: sh -c "npm run cli:ccxt-collectors"
    #     volumes:
    #         - ../:/app
    #         - /app/node_modules

    # ccxt-collectors-2:
    #     image: ${BE_REGISTRY_ADDRESS}:${BE_TAG}
    #     container_name: ccdb-ccxt-collectors-2
    #     depends_on:
    #         timescale:
    #             condition: service_healthy
    #         rabbitmq:
    #             condition: service_started
    #     env_file: ./env/.env.backend
    #     environment:
    #         CCXT_INSTANCE_POSITION: 1
    #         CCXT_REPLICA_SIZE: 2
    #     command: sh -c "npm run cli:ccxt-collectors"
    #     volumes:
    #         - ../:/app
    #         - /app/node_modules

    # xrpl-collectors-1:
    #     image: ${BE_REGISTRY_ADDRESS}:${BE_TAG}
    #     container_name: ccdb-xrpl-collectors-1
    #     depends_on:
    #         timescale:
    #             condition: service_healthy
    #         rabbitmq:
    #             condition: service_started
    #     env_file: ./env/.env.backend
    #     environment:
    #         XRPL_INSTANCE_POSITION: 0
    #         XRPL_REPLICA_SIZE: 2
    #     command: sh -c "npm run cli:xrpl-collectors"
    #     volumes:
    #         - ../:/app
    #         - /app/node_modules

    database-writer:
        image: ${BE_REGISTRY_ADDRESS}:${BE_TAG}
        container_name: ccdb-database-writer
        depends_on:
            timescale:
                condition: service_healthy
            rabbitmq:
                condition: service_started
        env_file: ./env/.env.backend
        command: sh -c "npm run workers:database-writer:nodemon"
        volumes:
            - ../:/app
            - /app/node_modules

    markets-refresher:
        image: ${BE_REGISTRY_ADDRESS}:${BE_TAG}
        container_name: ccdb-markets-refresher
        depends_on:
            timescale:
                condition: service_healthy
        env_file: ./env/.env.backend
        command: sh -c "npm run workers:markets-refresher:nodemon"
        volumes:
            - ../:/app
            - /app/node_modules

    timescale:
        image: timescale/timescaledb:2.11.1-pg15
        container_name: ccdb-timescale
        restart: always
        ports: ['5432:5432']
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -d ccdb -U postgres']
            interval: 10s
            timeout: 5s
            retries: 5
        env_file: ./env/.env.timescale
        command: postgres -c 'max_connections=500'
        volumes:
            - ~/docker-volumes/ccdb/timescale:/var/lib/postgresql/data

    timescale-test:
        image: timescale/timescaledb:2.11.1-pg15
        container_name: ccdb-timescale-test
        restart: always
        ports: ['5431:5432']
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -d ccdb_test -U postgres']
            interval: 10s
            timeout: 5s
            retries: 5
        env_file: ./env/.env.timescale-test
        command: postgres -c 'max_connections=500'
        volumes:
            - ~/docker-volumes/ccdb/timescale-test:/var/lib/postgresql/data

    rabbitmq:
        image: rabbitmq:3.12.0-management
        container_name: ccdb-rabbitmq
        hostname: 'dev-rabbitmq'
        ports:
            - 5672:5672
            - 15672:15672
        restart: unless-stopped
        env_file: ./env/.env.rabbitmq
        volumes:
            - '~/docker-volumes/ccdb/rabbitmq:/var/lib/rabbitmq'
